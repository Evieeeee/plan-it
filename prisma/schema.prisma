datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  stateId		Int
  allianceId	Int
  accessL		Role
  endDate		DateTime  @default("2999-12-12T14:21:00+02:00")
  accounts      Account[]
  sessions      Session[]
  
  owner		Alliance? @relation("owner")
  alliance Alliance?  @relation(fields: [allianceId], references: [id], onDelete: Cascade)
  gameState GameState? @relation(fields: [stateId], references: [id])
  ownsState	GameState? @relation("owner")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model GameState {
  id          	Int @id @default(autoincrement()) 
  name 			String @unique
  ownerId       String? @unique
  endDate       DateTime @default("2999-12-12T14:21:00+02:00")
  
  owner 		User?      @relation("owner", fields: [ownerId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  alliances 	Alliance[]
  users			User[]
  events		Event[]
  
}

model Event {
  id			Int @id @default(autoincrement()) 
  stateId       Int
  allianceId    Int?
  eventDt		DateTime
  dateOpen		DateTime?
  dateClosed	DateTime?
  
  gameState 	GameState?  @relation(fields: [stateId], references: [id], onDelete: Cascade)
  govAlliance	Alliance?   @relation(fields: [allianceId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  buildings		Building[]
  players		Player[]
  
  @@unique([stateId, eventDt])
}

model Alliance {
  id            Int    @id @default(autoincrement()) 
  name			String
  ownerId		String? @unique
  stateId		Int
  image			String?
  endDate		DateTime @default("2999-12-12T14:21:00+02:00")
  
  owner			User?	  @relation("owner", fields: [ownerId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  inState		GameState? @relation(fields: [stateId], references: [id], onDelete: Cascade)
  players		Player[]
  users			User[]
  runEvent		Event[]
  
  @@unique([name, stateId])
 }
 
model Player {  
  id            Int    @id @default(autoincrement()) 	
  name			String?
  allianceId	Int?
  prevAll		Int?
  troopT_1		Troop
  troopM_1		BigInt?
  troopL_1		Int?
  troopT_2		Troop
  troopM_2		BigInt?
  troopL_2		Int?
  might			BigInt?
  rally			BigInt?
  audit			String[]
  
  
  
  eventId		Int?
  avail	Availability?
  buildingId	Int?

  attended		DateTime[]
  bubbled		DateTime[]
  endDate		DateTime @default("2999-12-12T14:21:00+02:00")
  
  	
  availableE	Event? @relation(fields: [eventId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  assignedB		Building? @relation("Assigned",fields: [buildingId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  inAlliance	Alliance?  @relation(fields: [allianceId], references: [id], onDelete: Cascade)
  captain		Building?	@relation("Captain")
  
  @@unique([name, allianceId])
 }
 
 model Building {
 id				Int	@id @default(autoincrement()) 
  name			String?
  attack		Boolean?
  stateId		Int
  eventId		Int
  captainId		Int?  @unique
  captain 		Player?    @relation("Captain",fields: [captainId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  event			Event?	  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  assigned		Player[]  @relation("Assigned")
  
  
  @@unique([name, eventId])
  }
  
 model Access {
  role	Role 
  page		Page
  access	Boolean
  
  @@id([role,page])
  @@unique([role,page])
 }
  
  enum Role {
  NOACCESS
  USER
  TRACKER
  Event
  ADMIN
  OWNER
  }
  
  enum Troop {
  RIDER
  SHOOTER
  FIGHER
  }
  
  enum Page {
  ALLIANCE
  ADMIN
  EVENTS
  TRACKING
  FAQ
  }
  
  enum Availability {
  RESERVE
  DEFEND
  ATTACK
  HELP
  }